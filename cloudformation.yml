---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: manual
Parameters:
  Environment:
    Type: String
  ArtifactBucketName:
    Type: String
  ArtifactBucketPath:
    Type: String

Resources:
  ServerlessApi:
    Type: AWS::Serverless::Api
    DependsOn: S3SiteCodeAccessIamPolicy
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      AccessLogSetting: {}
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2017-04-26T03:23:48Z"
          title: !Sub ${Environment}-hello-world
        schemes:
          - "https"
        paths:
          /:
            get:
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt S3SiteCodeAccessIamRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/${ArtifactBucketName}/${ArtifactBucketPath}/build/index.html"
                responses:
                  default:
                    statusCode: "500"
                  "2\\d{2}":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
          /{proxy+}:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                  schema:
                    "$ref": "#/definitions/Empty"
                  headers:
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    SHA:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !GetAtt S3SiteCodeAccessIamRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/${ArtifactBucketName}/${ArtifactBucketPath}/build/{proxy}"
                responses:
                  default:
                    statusCode: "500"
                  "2\\d{2}":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                      method.response.header.SHA: "'%SHA%'"
                requestParameters:
                  integration.request.path.proxy: "method.request.path.proxy"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-request-validators:
          all:
            validateRequestParameters: true
            validateRequestBody: true
        x-amazon-apigateway-binary-media-types:
          - "*/*"

  S3SiteCodeAccessIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  S3SiteCodeAccessIamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${ArtifactBucketName}/${ArtifactBucketPath}/build/*"
      PolicyName: !Sub
        - ${Environment}-${HackVer}
        - HackVer: !Select [2, !Split ["/", !Ref ArtifactBucketPath]]
      Roles:
        - !Ref S3SiteCodeAccessIamRole

Outputs:
  ServerlessApiUrl:
    Value: !Sub "https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
